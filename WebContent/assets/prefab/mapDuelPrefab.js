// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.0 (Phaser v2.6.2)


/**
 * mapDuelPrefab.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.
    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function mapDuelPrefab(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType) {
	
	Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);
	var _select_Map = this.game.add.group(this);
	
	var _BG_chooseMap = this.game.add.sprite(-9.0, 68.0, 'BG_chooseMap', null, _select_Map);
	_BG_chooseMap.scale.setTo(1.02, 1.63);
	
	var _choosemap_bar = this.game.add.sprite(5.0, 78.0, 'HUD2Atlas', 'choosemap_bar', _select_Map);
	
	var __grpChooseMap = this.game.add.group(_select_Map);
	__grpChooseMap.position.setTo(0.0, 100.0);
	
	var _MAP_05 = this.game.add.group(__grpChooseMap);
	_MAP_05.position.setTo(1.0, 2360.0);
	_MAP_05.scale.setTo(1.3, 1.3);
	
	this.game.add.sprite(39.0, 548.0, 'EnvironmentAtlas', 'entry bar', _MAP_05);
	
	this.game.add.sprite(45.0, 258.0, 'HUD2Atlas', 'islands_map', _MAP_05);
	
	var _txt_title_map5 = this.game.add.text(205.0, 269.0, 'EUROPE', {"font":"bold 35px Arial","fill":"#ffffff"}, _MAP_05);
	
	var _txt_entry_fee_map5 = this.game.add.text(134.0, 566.0, 'Entry fee 30', {"font":"bold 27px Arial","fill":"#ffffff"}, _MAP_05);
	
	var _diamond5 = this.game.add.sprite(410.0, 561.0, 'HUDAtlas', 'diamond', _MAP_05);
	_diamond5.scale.setTo(0.5, 0.5);
	
	var _txt_win_map5 = this.game.add.text(134.0, 614.0, 'WIN 60', {"font":"bold 27px Arial","fill":"#ffffff"}, _MAP_05);
	
	var _diamond5 = this.game.add.sprite(410.0, 617.0, 'HUDAtlas', 'diamond', _MAP_05);
	_diamond5.scale.setTo(0.5, 0.5);
	
	var _txt_win_cost5 = this.game.add.text(328.0, 616.0, '60', {"font":"bold 27px Arial","fill":"#ffffff"}, _MAP_05);
	
	var _txt_entry_fee_cost5 = this.game.add.text(329.0, 564.0, '30', {"font":"bold 27px Arial","fill":"#ffffff"}, _MAP_05);
	
	var _MAP_04 = this.game.add.group(__grpChooseMap);
	_MAP_04.position.setTo(1.0, 1660.0);
	_MAP_04.scale.setTo(1.3, 1.3);
	
	this.game.add.sprite(45.0, 258.0, 'map_Asia', null, _MAP_04);
	
	this.game.add.sprite(39.0, 548.0, 'EnvironmentAtlas', 'entry bar', _MAP_04);
	
	var _txt_title_map4 = this.game.add.text(228.0, 269.0, 'EUROPE', {"font":"bold 35px Arial","fill":"#ffffff","align":"center"}, _MAP_04);
	
	var _txt_entry_fee_map4 = this.game.add.text(134.0, 566.0, 'Entry fee 30', {"font":"bold 27px Arial","fill":"#ffffff"}, _MAP_04);
	
	var _diamond4 = this.game.add.sprite(410.0, 561.0, 'HUDAtlas', 'diamond', _MAP_04);
	_diamond4.scale.setTo(0.5, 0.5);
	
	var _txt_win_map4 = this.game.add.text(134.0, 616.0, 'WIN 60', {"font":"bold 27px Arial","fill":"#ffffff"}, _MAP_04);
	
	var _diamond4 = this.game.add.sprite(410.0, 614.0, 'HUDAtlas', 'diamond', _MAP_04);
	_diamond4.scale.setTo(0.5, 0.5);
	
	var _txt_win_cost4 = this.game.add.text(339.0, 614.0, '60', {"font":"bold 27px Arial","fill":"#ffffff"}, _MAP_04);
	
	var _txt_entry_fee_cost4 = this.game.add.text(339.0, 564.0, '30', {"font":"bold 27px Arial","fill":"#ffffff"}, _MAP_04);
	
	var _MAP_03 = this.game.add.group(__grpChooseMap);
	_MAP_03.position.setTo(1.0, 960.0);
	_MAP_03.scale.setTo(1.3, 1.3);
	
	this.game.add.sprite(45.0, 258.0, 'HUD2Atlas', 'amerias_map', _MAP_03);
	
	this.game.add.sprite(39.0, 548.0, 'EnvironmentAtlas', 'entry bar', _MAP_03);
	
	var _txt_title_map3 = this.game.add.text(202.0, 275.0, 'EUROPE', {"font":"bold 35px Arial","fill":"#ffffff"}, _MAP_03);
	
	var _txt_entry_fee_map3 = this.game.add.text(134.0, 566.0, 'Entry fee 30', {"font":"bold 27px Arial","fill":"#ffffff"}, _MAP_03);
	
	var _txt_win_cost3 = this.game.add.text(359.0, 614.0, '60', {"font":"bold 27px Arial","fill":"#ffffff"}, _MAP_03);
	
	var _diamond3 = this.game.add.sprite(410.0, 561.0, 'HUDAtlas', 'diamond', _MAP_03);
	_diamond3.scale.setTo(0.5, 0.5);
	
	var _txt_win_map3 = this.game.add.text(134.0, 616.0, 'WIN 60', {"font":"bold 27px Arial","fill":"#ffffff"}, _MAP_03);
	
	var _diamond3 = this.game.add.sprite(410.0, 614.0, 'HUDAtlas', 'diamond', _MAP_03);
	_diamond3.scale.setTo(0.5, 0.5);
	
	var _txt_entry_fee_cost3 = this.game.add.text(359.0, 564.0, '30', {"font":"bold 27px Arial","fill":"#ffffff"}, _MAP_03);
	
	var _MAP_02 = this.game.add.group(__grpChooseMap);
	_MAP_02.position.setTo(1.0, 260.0);
	_MAP_02.scale.setTo(1.3, 1.3);
	
	this.game.add.sprite(39.0, 548.0, 'EnvironmentAtlas', 'entry bar', _MAP_02);
	
	var _txt_entry_fee_map2 = this.game.add.text(134.0, 566.0, 'Entry fee 30', {"font":"bold 27px Arial","fill":"#ffffff"}, _MAP_02);
	
	var _diamond2 = this.game.add.sprite(410.0, 561.0, 'HUDAtlas', 'diamond', _MAP_02);
	_diamond2.scale.setTo(0.5, 0.5);
	
	var _txt_win_map2 = this.game.add.text(134.0, 616.0, 'WIN 60', {"font":"bold 27px Arial","fill":"#ffffff"}, _MAP_02);
	
	var _diamond2 = this.game.add.sprite(410.0, 614.0, 'HUDAtlas', 'diamond', _MAP_02);
	_diamond2.scale.setTo(0.5, 0.5);
	
	this.game.add.sprite(45.0, 258.0, 'map_Africa', null, _MAP_02);
	
	var _txt_win_cost2 = this.game.add.text(359.0, 614.0, '60', {"font":"bold 27px Arial","fill":"#ffffff"}, _MAP_02);
	
	var _txt_title_map2 = this.game.add.text(208.0, 269.0, 'EUROPE', {"font":"bold 35px Arial","fill":"#ffffff"}, _MAP_02);
	
	var _txt_entry_fee_cost2 = this.game.add.text(372.0, 564.0, '30', {"font":"bold 27px Arial","fill":"#ffffff"}, _MAP_02);
	
	var _MAP_01 = this.game.add.group(__grpChooseMap);
	_MAP_01.position.setTo(1.0, -440.0);
	_MAP_01.scale.setTo(1.3, 1.3);
	
	this.game.add.sprite(45.0, 258.0, 'map_Europe', null, _MAP_01);
	
	this.game.add.sprite(39.0, 548.0, 'EnvironmentAtlas', 'entry bar', _MAP_01);
	
	var _txt_title_map1 = this.game.add.text(208.0, 269.0, 'EUROPE', {"font":"bold 35px Arial","fill":"#ffffff"}, _MAP_01);
	
	var _txt_entry_fee_map1 = this.game.add.text(134.0, 566.0, 'ENTRY FEE 30', {"font":"bold 27px Arial","fill":"#ffffff"}, _MAP_01);
	
	var _diamond = this.game.add.sprite(410.0, 562.0, 'HUDAtlas', 'diamond', _MAP_01);
	_diamond.scale.setTo(0.5, 0.5);
	
	var _txt_win_map1 = this.game.add.text(134.0, 617.0, 'WIN 60', {"font":"bold 27px Arial","fill":"#ffffff"}, _MAP_01);
	
	var _diamond1 = this.game.add.sprite(410.0, 615.0, 'HUDAtlas', 'diamond', _MAP_01);
	_diamond1.scale.setTo(0.5, 0.5);
	
	var _txt_entry_fee_cost1 = this.game.add.text(369.0, 564.0, '30', {"font":"bold 27px Arial","fill":"#ffffff"}, _MAP_01);
	
	var _txt_win_cost1 = this.game.add.text(369.0, 614.0, '60', {"font":"bold 27px Arial","fill":"#ffffff"}, _MAP_01);
	
	var _button_ = this.game.add.button(83.0, 3119.0, 'HUDAtlas', null, this, null, 'button 02', null, null, __grpChooseMap);
	_button_.alpha = 0.0;
	
	var __grp_Avatar_Choose_Map = this.game.add.group(_select_Map);
	
	this.game.add.sprite(2.0, 70.0, 'EnvironmentAtlas', 'avatar bar', __grp_Avatar_Choose_Map);
	
	var _avatar_frame1 = this.game.add.sprite(454.0, 117.0, 'EnvironmentAtlas', 'avatar frame', __grp_Avatar_Choose_Map);
	
	var _avatar_frame = this.game.add.sprite(76.0, 117.0, 'EnvironmentAtlas', 'avatar frame', __grp_Avatar_Choose_Map);
	
	var _other_Picture = this.game.add.sprite(534.0, 198.0, 'EnvironmentAtlas', 'earth icon', __grp_Avatar_Choose_Map);
	_other_Picture.anchor.setTo(0.5, 0.5);
	
	var _profile_Picture = this.game.add.sprite(156.0, 197.0, 'profile_sample', null, __grp_Avatar_Choose_Map);
	_profile_Picture.anchor.setTo(0.5, 0.5);
	
	var _txt_other_player_name = this.game.add.text(472.0, 303.0, 'Player', {"font":"bold 30px Arial","fill":"#ffffff","align":"center"}, __grp_Avatar_Choose_Map);
	_txt_other_player_name.anchor.setTo(0.5, 0.0);
	
	this.game.add.text(288.0, 156.0, 'VS', {"font":"bold 80px Arial","fill":"#ffffff","align":"center"}, __grp_Avatar_Choose_Map);
	
	var _txt_user_Name = this.game.add.text(76.0, 303.0, 'Random Player', {"font":"bold 30px Arial","fill":"#ffffff","align":"center"}, __grp_Avatar_Choose_Map);
	_txt_user_Name.anchor.setTo(0.5, 0.0);
	
	var _txt_chooseMap_title = this.game.add.text(292.0, 109.0, 'CHOOSE MAPS', {"font":"bold 50px Arial","fill":"#ffffff"}, _select_Map);
	_txt_chooseMap_title.anchor.setTo(0.5, 0.0);
	
	var _btn_close_button_duelMap = this.game.add.button(616.0, 98.0, 'HUDAtlas', null, this, null, 'close button', null, null, _select_Map);
	
	var __grp_Not_Enough_gems = this.game.add.group(_select_Map);
	__grp_Not_Enough_gems.position.setTo(3093.0, -683.0);
	
	var _BG_not_enough_gems = this.game.add.sprite(13.0, 247.0, 'BG_not_enough_gems', null, __grp_Not_Enough_gems);
	_BG_not_enough_gems.scale.setTo(1.0, 1.1);
	
	var _txt_not_enough_gem = this.game.add.text(164.0, 301.0, 'NOT ENOUGH GEMS', {"font":"bold 35px Arial","fill":"#ffffff"}, __grp_Not_Enough_gems);
	_txt_not_enough_gem.anchor.setTo(0.5, 0.0);
	
	var _btn_watchVideo = this.game.add.button(55.0, 736.0, 'HUDAtlas', null, this, null, 'button 02', null, null, __grp_Not_Enough_gems);
	_btn_watchVideo.scale.setTo(0.5, 0.6);
	
	var _btn_playSingle = this.game.add.button(368.0, 735.0, 'HUDAtlas', null, this, null, 'button 02', null, null, __grp_Not_Enough_gems);
	_btn_playSingle.scale.setTo(0.5, 0.6);
	
	var _btn_close_enough_gem = this.game.add.button(572.0, 281.0, 'HUDAtlas', null, this, null, 'close button', null, null, __grp_Not_Enough_gems);
	
	var _txt_play_single_nofti = this.game.add.text(111.0, 553.0, 'Play the single match to get some more !', {"font":"bold 25px Arial","fill":"#ffffff"}, __grp_Not_Enough_gems);
	_txt_play_single_nofti.anchor.setTo(0.5, 0.0);
	
	var _txt_low_gems = this.game.add.text(180.0, 430.0, 'You are low on gems', {"font":"bold 35px Arial","fill":"#4fe8ff"}, __grp_Not_Enough_gems);
	_txt_low_gems.anchor.setTo(0.5, 0.0);
	
	var _txt_playSingle = this.game.add.text(520.0, 756.0, 'Play Single', {"font":"bold 30px Arial","fill":"#ffffff"}, __grp_Not_Enough_gems);
	_txt_playSingle.anchor.setTo(0.5, 0.5);
	
	var _txt_watch_Video_nofti = this.game.add.text(165.0, 490.0, 'Watch video to get some more !', {"font":"bold 25px Arial","fill":"#ffffff"}, __grp_Not_Enough_gems);
	_txt_watch_Video_nofti.anchor.setTo(0.5, 0.0);
	
	var _txt_watch_Video = this.game.add.text(199.0, 756.0, 'Watch Video', {"font":"bold 30px Arial","fill":"#ffffff"}, __grp_Not_Enough_gems);
	_txt_watch_Video.anchor.setTo(0.5, 0.0);
	
	var _avatar_wait = this.game.add.group(this);
	_avatar_wait.position.setTo(1302.0, -451.0);
	
	this.game.add.sprite(-12.0, 69.0, 'BG_duel_wait', null, _avatar_wait);
	
	var _avatar_frame3 = this.game.add.sprite(64.0, 114.0, 'HUD2Atlas', 'avatar frame', _avatar_wait);
	
	var _txt_other_player_name_wait = this.game.add.text(533.0, 295.0, 'Random', {"font":"bold 30px Arial","fill":"#ffffff","align":"center"}, _avatar_wait);
	_txt_other_player_name_wait.anchor.setTo(0.5, 0.0);
	
	var _txt_user_Name_wait = this.game.add.text(64.0, 295.0, 'Random Player', {"font":"bold 30px Arial","fill":"#ffffff","align":"center"}, _avatar_wait);
	_txt_user_Name_wait.anchor.setTo(0.5, 0.0);
	
	this.game.add.text(292.0, 156.0, 'VS', {"font":"bold 80px Arial","fill":"#ffffff","align":"center"}, _avatar_wait);
	
	var _profile_Picture_wait = this.game.add.sprite(155.0, 199.0, 'profile_sample', null, _avatar_wait);
	_profile_Picture_wait.anchor.setTo(0.5, 0.5);
	
	var _avatar_frame2 = this.game.add.sprite(440.0, 112.0, 'HUD2Atlas', 'avatar frame', _avatar_wait);
	
	var __grp_gems_infor = this.game.add.group(_avatar_wait);
	
	this.game.add.sprite(6.0, 433.0, 'HUD2Atlas', 'prize bar', __grp_gems_infor);
	
	this.game.add.text(297.0, 456.0, 'PRIZE', {"font":"bold 40px Arial","fill":"#ffffff","align":"center"}, __grp_gems_infor);
	
	var _txt_gem_total = this.game.add.text(236.0, 537.0, '140K', {"font":"bold 50px Arial","fill":"#ffffff","align":"center"}, __grp_gems_infor);
	
	var _diamond_total = this.game.add.sprite(339.0, 531.0, 'HUDAtlas', 'diamond', __grp_gems_infor);
	
	var _txt_gem_02 = this.game.add.text(482.0, 356.0, '140k', {"font":"bold 30px Arial","fill":"#ffffff","align":"center"}, __grp_gems_infor);
	
	var _diamond7 = this.game.add.sprite(546.0, 356.0, 'HUDAtlas', 'diamond', __grp_gems_infor);
	_diamond7.scale.setTo(0.5, 0.5);
	
	var _txt_gem_01 = this.game.add.text(121.0, 356.0, '140K', {"font":"bold 30px Arial","fill":"#ffffff","align":"center"}, __grp_gems_infor);
	
	var _diamond6 = this.game.add.sprite(185.0, 357.0, 'HUDAtlas', 'diamond', __grp_gems_infor);
	_diamond6.scale.setTo(0.5, 0.5);
	
	var _other_Picture_wait = this.game.add.sprite(533.0, 198.0, 'EnvironmentAtlas', 'earth icon', _avatar_wait);
	_other_Picture_wait.scale.setTo(0.95, 0.95);
	_other_Picture_wait.anchor.setTo(0.5, 0.5);
	
	var __grp_wait_joinRoom = this.game.add.group(_avatar_wait);
	
	var _btn_Cancel_duel = this.game.add.button(82.0, 479.0, 'HUDAtlas', null, this, null, 'button 02', null, null, __grp_wait_joinRoom);
	
	var _txt_cancel_duel_mode = this.game.add.text(354.0, 512.0, 'Cancel', {"font":"bold 50px Arial","fill":"#ffffff","align":"center"}, __grp_wait_joinRoom);
	_txt_cancel_duel_mode.anchor.setTo(0.5, 0.0);
	
	var _txt_minute = this.game.add.text(325.0, 335.0, '0 :', {"font":"bold 30px Arial","fill":"#ffffff","align":"center"}, __grp_wait_joinRoom);
	_txt_minute.anchor.setTo(0.5, 0.0);
	
	var _txt_second = this.game.add.text(367.0, 335.0, '45', {"font":"bold 30px Arial","fill":"#ffffff","align":"center"}, __grp_wait_joinRoom);
	_txt_second.anchor.setTo(0.5, 0.0);
	
	var _txt_infor_wait = this.game.add.text(379.0, 387.0, 'Searching for the opponent…', {"font":"bold 30px Arial","fill":"#ffffff","align":"center"}, __grp_wait_joinRoom);
	_txt_infor_wait.anchor.setTo(0.5, 0.0);
	
	var __grp_accept_challege = this.game.add.group(_avatar_wait);
	
	var _btn_refuse = this.game.add.button(18.0, 502.0, 'HUDAtlas', null, this, null, 'button 01', null, null, __grp_accept_challege);
	_btn_refuse.scale.setTo(0.6, 1.0);
	
	var _btn_accept = this.game.add.button(348.0, 502.0, 'HUDAtlas', null, this, null, 'button 01', null, null, __grp_accept_challege);
	_btn_accept.scale.setTo(0.6, 1.0);
	
	var _txt_accept = this.game.add.text(516.0, 515.0, 'Accept', {"font":"bold 50px Arial","fill":"#ffffff","align":"center"}, __grp_accept_challege);
	_txt_accept.anchor.setTo(0.5, 0.0);
	
	var _txt_refuse = this.game.add.text(199.0, 511.0, 'Cancel', {"font":"bold 50px Arial","fill":"#ffffff","align":"center"}, __grp_accept_challege);
	_txt_refuse.anchor.setTo(0.5, 0.0);
	
	var _txt_friend_Challenge = this.game.add.text(354.0, 380.0, 'Your friend is challenging you to a duel !', {"font":"bold 30px Arial","fill":"#ffffff","align":"center"}, __grp_accept_challege);
	_txt_friend_Challenge.anchor.setTo(0.5, 0.0);
	
	
	
	// public fields
	
	this.fGroup = this;
	this.fSelect_Map = _select_Map;
	this.fChoosemap_bar = _choosemap_bar;
	this.f_grpChooseMap = __grpChooseMap;
	this.fMAP_05 = _MAP_05;
	this.fTxt_title_map5 = _txt_title_map5;
	this.fTxt_entry_fee_map5 = _txt_entry_fee_map5;
	this.fTxt_win_map5 = _txt_win_map5;
	this.fTxt_win_cost5 = _txt_win_cost5;
	this.fTxt_entry_fee_cost5 = _txt_entry_fee_cost5;
	this.fMAP_04 = _MAP_04;
	this.fTxt_title_map4 = _txt_title_map4;
	this.fTxt_entry_fee_map4 = _txt_entry_fee_map4;
	this.fTxt_win_map4 = _txt_win_map4;
	this.fTxt_win_cost4 = _txt_win_cost4;
	this.fTxt_entry_fee_cost4 = _txt_entry_fee_cost4;
	this.fMAP_03 = _MAP_03;
	this.fTxt_title_map3 = _txt_title_map3;
	this.fTxt_entry_fee_map3 = _txt_entry_fee_map3;
	this.fTxt_win_cost3 = _txt_win_cost3;
	this.fTxt_win_map3 = _txt_win_map3;
	this.fTxt_entry_fee_cost3 = _txt_entry_fee_cost3;
	this.fMAP_02 = _MAP_02;
	this.fTxt_entry_fee_map2 = _txt_entry_fee_map2;
	this.fTxt_win_map2 = _txt_win_map2;
	this.fTxt_win_cost2 = _txt_win_cost2;
	this.fTxt_title_map2 = _txt_title_map2;
	this.fTxt_entry_fee_cost2 = _txt_entry_fee_cost2;
	this.fMAP_01 = _MAP_01;
	this.fTxt_title_map1 = _txt_title_map1;
	this.fTxt_entry_fee_map1 = _txt_entry_fee_map1;
	this.fTxt_win_map1 = _txt_win_map1;
	this.fTxt_entry_fee_cost1 = _txt_entry_fee_cost1;
	this.fTxt_win_cost1 = _txt_win_cost1;
	this.f_grp_Avatar_Choose_Map = __grp_Avatar_Choose_Map;
	this.fAvatar_frame1 = _avatar_frame1;
	this.fAvatar_frame = _avatar_frame;
	this.fProfile_Picture = _profile_Picture;
	this.fTxt_other_player_name = _txt_other_player_name;
	this.fTxt_user_Name = _txt_user_Name;
	this.fTxt_chooseMap_title = _txt_chooseMap_title;
	this.fBtn_close_button_duelMap = _btn_close_button_duelMap;
	this.f_grp_Not_Enough_gems = __grp_Not_Enough_gems;
	this.fBG_not_enough_gems = _BG_not_enough_gems;
	this.fTxt_not_enough_gem = _txt_not_enough_gem;
	this.fBtn_watchVideo = _btn_watchVideo;
	this.fBtn_playSingle = _btn_playSingle;
	this.fBtn_close_enough_gem = _btn_close_enough_gem;
	this.fTxt_play_single_nofti = _txt_play_single_nofti;
	this.fTxt_low_gems = _txt_low_gems;
	this.fTxt_playSingle = _txt_playSingle;
	this.fTxt_watch_Video_nofti = _txt_watch_Video_nofti;
	this.fTxt_watch_Video = _txt_watch_Video;
	this.fAvatar_wait = _avatar_wait;
	this.fAvatar_frame3 = _avatar_frame3;
	this.fTxt_other_player_name_wait = _txt_other_player_name_wait;
	this.fTxt_user_Name_wait = _txt_user_Name_wait;
	this.fProfile_Picture_wait = _profile_Picture_wait;
	this.fAvatar_frame2 = _avatar_frame2;
	this.f_grp_gems_infor = __grp_gems_infor;
	this.fTxt_gem_total = _txt_gem_total;
	this.fDiamond_total = _diamond_total;
	this.fTxt_gem_02 = _txt_gem_02;
	this.fTxt_gem_01 = _txt_gem_01;
	this.fOther_Picture_wait = _other_Picture_wait;
	this.f_grp_wait_joinRoom = __grp_wait_joinRoom;
	this.fBtn_Cancel_duel = _btn_Cancel_duel;
	this.fTxt_cancel_duel_mode = _txt_cancel_duel_mode;
	this.fTxt_second = _txt_second;
	this.fTxt_infor_wait = _txt_infor_wait;
	this.f_grp_accept_challege = __grp_accept_challege;
	this.fBtn_refuse = _btn_refuse;
	this.fBtn_accept = _btn_accept;
	this.fTxt_accept = _txt_accept;
	this.fTxt_refuse = _txt_refuse;
	this.fTxt_friend_Challenge = _txt_friend_Challenge;
	
	this.Create();
	
}

/** @type Phaser.Group */
var mapDuelPrefab_proto = Object.create(Phaser.Group.prototype);
mapDuelPrefab.prototype = mapDuelPrefab_proto;
mapDuelPrefab.prototype.constructor = mapDuelPrefab;

/* --- end generated code --- */
// -- user code here --

var USERTYPE={
		MASTER :0 ,
		CLIENT :1
}
var userType  = USERTYPE.MASTER;
var CHARADD = " ARCHER";
var GEM_EARNED_WHEN_WATCH_VIDEOS_ADS = 15;
var isFriendCall = false;
mapDuelPrefab.prototype.Init = function(lvl){
	level = lvl;
}



mapDuelPrefab.prototype.Create = function(){
	
	this.MAX_MAP =5;
	 
	this.buttonChooseMap = new Array();
	this.textChooseMap = new Array();


	var startY = 210;
	this.scroller = game.add.existing(new ScrollableArea(0, startY, 720, 920, {
		horizontalScroll: false,
		verticalScroll: true,
		verticalWheel: true,
		horizontalWheel: false,
		timeConstantScroll: 0
	},true,0,0));
	this.scroller.inputEnabled = true;
	
	this.scroller.addChild(this.f_grpChooseMap);
	var distance =700;
	for(var i =0 ;i< this.MAX_MAP;i++){
		var button = this.game.add.button(83.0, 500, 'HUDAtlas', null, this, null, 'button 02', null, null, this.this);
		button.scale.setTo(0.9);
		button.anchor.setTo(0.5, 0);
		button.position.setTo(this.fMAP_01.x +this.fMAP_01.width/2+50 ,520+(i*distance));
		this.scroller.addChild(button);
		this.buttonChooseMap.push(button);


		var text = this.game.add.text(169.0, 684.0, 'PLAY 1 VS 1', {"font":"bold 35px Arial","fill":"#ffffff"},this);
		text.anchor.setTo(0.5, 0.5);
		text.position.setTo(button.x  ,button.y +button.height/2);
		this.scroller.addChild(text);
		this.textChooseMap.push(text);
	}
	
	
	this.scroller.start();
	
	//_btn_chooseMap_map1.onInputUp.add(this.onEvent,this);
	
	this.visibileMenuDuel(false);
	
	this.fTxt_user_Name.text = facebookStuff.name;
	this.fTxt_user_Name_wait.text = facebookStuff.name;
	this.facebookStuffOther = {
			name:"",
	}
	
	otherTexture = this.fOther_Picture_wait;
	
	this.textTitleMap = new Array();
	this.textTitleMap.push(this.fTxt_title_map1);
	this.textTitleMap.push(this.fTxt_title_map2);
	this.textTitleMap.push(this.fTxt_title_map3);
	this.textTitleMap.push(this.fTxt_title_map4);
	this.textTitleMap.push(this.fTxt_title_map5);
	
	this.textEntryFee = new Array();
	this.textEntryFee.push(this.fTxt_entry_fee_map1);
	this.textEntryFee.push(this.fTxt_entry_fee_map2);
	this.textEntryFee.push(this.fTxt_entry_fee_map3);
	this.textEntryFee.push(this.fTxt_entry_fee_map4);
	this.textEntryFee.push(this.fTxt_entry_fee_map5);
	
	this.textEntryFeeCost = new Array();
	this.textEntryFeeCost.push(this.fTxt_entry_fee_cost1);
	this.textEntryFeeCost.push(this.fTxt_entry_fee_cost2);
	this.textEntryFeeCost.push(this.fTxt_entry_fee_cost3);
	this.textEntryFeeCost.push(this.fTxt_entry_fee_cost4);
	this.textEntryFeeCost.push(this.fTxt_entry_fee_cost5);
	
	this.textWinCost = new Array();
	this.textWinCost.push(this.fTxt_win_cost1);
	this.textWinCost.push(this.fTxt_win_cost2);
	this.textWinCost.push(this.fTxt_win_cost3);
	this.textWinCost.push(this.fTxt_win_cost4);
	this.textWinCost.push(this.fTxt_win_cost5);
	
	this.textWin = new Array();
	this.textWin.push(this.fTxt_win_map1);
	this.textWin.push(this.fTxt_win_map2);
	this.textWin.push(this.fTxt_win_map3);
	this.textWin.push(this.fTxt_win_map4);
	this.textWin.push(this.fTxt_win_map5);
	
	this.entryFeeCost = new Array();
	this.entryFeeCost.push(30);
	this.entryFeeCost.push(80);
	this.entryFeeCost.push(400);
	this.entryFeeCost.push(2000);
	this.entryFeeCost.push(10000);
	
	
	this.winCost = new Array();
	this.winCost.push(60);
	this.winCost.push(160);
	this.winCost.push(800);
	this.winCost.push(4000);
	this.winCost.push(20000);
	
	this.nameMaps = new Array();
	this.nameMaps.push("EUROPE");
	this.nameMaps.push("AFRICA");
	this.nameMaps.push("AMERICAS");
	this.nameMaps.push("ASIA");
	this.nameMaps.push("ISLANDS");
	

	
	//SET INFORMATION MAP
	//console.log("In");
	for(var i = 0; i< this.entryFeeCost.length ; i++){
		this.textTitleMap[i].text = this.nameMaps[i];
		this.textEntryFeeCost[i].text =  this.entryFeeCost[i];
		this.textWinCost[i].text = this.winCost[i];
	}
	
	this.loader  = new Phaser.Loader(game);
	
	this.buttonChooseMap[0].onInputUp.add(function(){this.onEventPlayDuel(0)},this);
	this.buttonChooseMap[1].onInputUp.add(function(){this.onEventPlayDuel(1)},this);
	this.buttonChooseMap[2].onInputUp.add(function(){this.onEventPlayDuel(2)},this);
	this.buttonChooseMap[3].onInputUp.add(function(){this.onEventPlayDuel(3)},this);
	this.buttonChooseMap[4].onInputUp.add(function(){this.onEventPlayDuel(4)},this);
	this.roomASIA = new Array();
	this.time_add_room = 2;
	this.elapsed_Time = 0;
	this.isFirstLoad = false;
	this.fAvatar_wait.visible = false;
	this.fAvatar_wait.position.setTo(10,210);
	

	
	
	this.f_grp_gems_infor.visible = false ;
	
	this.fTxt_user_Name.x = this.fAvatar_frame.x + this.fAvatar_frame.width/2;
	this.fTxt_user_Name_wait.x = this.fAvatar_frame3.x + this.fAvatar_frame3.width/2;
	this.fTxt_other_player_name_wait.x = this.fAvatar_frame2.x + this.fAvatar_frame2.width/2;
	
	//cancel button wait player join room
	this.fBtn_Cancel_duel.onInputUp.add(this.onEventCancelJoinRoom,this);
	
	//accept play with friend
	this.fBtn_accept.onInputUp.add(this.onEventAcceptFriend,this);
	//refuse play with friend
	this.fBtn_refuse.onInputUp.add(this.onEventRefuseFriend,this);

	//close Duel Map
	this.fBtn_close_button_duelMap.onInputUp.add(this.onEventCloseDuelMap,this);
	
	this.f_grp_accept_challege.visible = false;
	//time
	this.Time = this.game.time.create();
	this.TIME_WAIT_JOIN_ROOM = 45;
	this.TIME_OTHER_FRIEND_LEAVE_ROOM = 3;
	this.duration = 0;
	this.isStartTime = false;
	this.isShowGemUIInfor = false;
	
	this.friendID = 0;
	this.createRoom = false;
	this.currentIndexGems = -1;
	this.isCancelJoinRoomWithFriend = false;
	this.isJoinRoomWithFriendSuccess = false;
	this.isJoinRoomWithFriendAgain = false;
	
	//not enough gem
	if(this.game.device.desktop){

		this.fBtn_watchVideo.visible = false;
		this.fTxt_watch_Video.visible = false;
		this.fBtn_playSingle.x = 219;
		this.fBtn_playSingle.y = 710;
		this.fTxt_watch_Video_nofti.visible = false;
		this.updateTextAlignCenter();
	}

	this.fBtn_playSingle.onInputUp.add(this.onEventPlaySingle,this);
	this.fBtn_watchVideo.onInputUp.add(this.onEventWatchVideo,this);
	this.fBtn_close_enough_gem.onInputUp.add(this.onEventCloseEnoughGem,this);
	this.isStateEnoughGems = false;
	this.f_grp_Not_Enough_gems.visible = false;
	this.f_grp_Not_Enough_gems.position.setTo(0,0);


	this.f_grp_Avatar_Choose_Map.visible = false;

	this.closeDuelMap();
	
	this.updateTextAlignCenter();
}



mapDuelPrefab.prototype.visibileMenuDuel = function(visible){
	this.f_grpChooseMap.visible  =visible;
}


mapDuelPrefab.prototype.openDuelMap = function(){
	this.visibleChooseMap(true);
	this.addChildScroller();
	this.scroller.start();
}

mapDuelPrefab.prototype.closeDuelMap = function(){
	this.visibleChooseMap(false);
	this.scroller.kill();
}

mapDuelPrefab.prototype.addChildScroller = function(){
	var startY = 210;
	this.scroller = game.add.existing(new ScrollableArea(0, startY, 720, 920, {
		horizontalScroll: false,
		verticalScroll: true,
		verticalWheel: true,
		horizontalWheel: false,
		timeConstantScroll: 0
	},true,0,0));
	this.scroller.inputEnabled = true;
	
	this.scroller.addChild(this.f_grpChooseMap);
	for(var i =0 ;i< this.MAX_MAP;i++){
		this.scroller.addChild(this.buttonChooseMap[i]);
		this.scroller.addChild(this.textChooseMap[i]);
	}
	this.scroller.PressedDown(false);
}


mapDuelPrefab.prototype.visibleChooseMap = function(visible){
	for(var i =0;i<this.buttonChooseMap.length;i++){
		this.buttonChooseMap[i].visible =visible;
		this.textChooseMap[i].visible =visible;
	}
}
mapDuelPrefab.prototype.endWaitTime = function(){
	this.Time.stop();
	this.isStartTime = false;
}
mapDuelPrefab.prototype.updateWaitTimeJoinRoom = function(){
	this.duration =this.TIME_WAIT_JOIN_ROOM - this.Time.seconds ;
	this.fTxt_second.text =  Math.round( this.duration);

	if(this.duration<= this.TIME_OTHER_FRIEND_LEAVE_ROOM){
		
		
		
		if(level.playMode  === PLAYMODE.WITHFRIEND){
		   
		   options =  {};
		   options.receivers = Photon.LoadBalancing.Constants.ReceiverGroup.Others;
		   GlobalSetting.photonManager.onRaiseEvent(12,null,options);
		  
	   }
	}
	
	if(this.duration<= 0){
		
		
		
		 if(level.playMode  === PLAYMODE.WITHFRIEND){
			game.state.start("Level");

			this.isCancelJoinRoomWithFriend = true;
			setTimeout(function () {
				level.f_grpMapDuel.isCancelJoinRoomWithFriend = false;
			   }, 1000);
		}
		
		
		GlobalSetting.photonManager.leaveRoom();
		//return home menu when over time
		game.state.start("Level");
		if(level.playMode === PLAYMODE.DUEL){
			setTimeout(function () {
				level.f_grpMainMenuPrefab.onEventDuelChooseMap();
				level.f_grpResultDuelMode.endBattle = false;
		    }, 75);
		}
		this.isStartTime = false;
	}
}

mapDuelPrefab.prototype.onEventPlaySingle = function(){

	 level.f_grpMainMenuPrefab.onEventPlaySingle();
	
}

mapDuelPrefab.prototype.onEventWatchVideo = function(){

	FBshowRewardedVideo();
	
}

mapDuelPrefab.prototype.onEventCloseDuelMap = function(){

	level.f_grpMapDuel.visible  = false;
	this.f_grpChooseMap.visible = false;
	level.f_grpMainMenuPrefab.hideControlButton();
	level.f_grpMainMenuPrefab.isOutClick  =false;
	level.f_grpWorldMapScene.startScroll();
	level.f_grpMainMenuPrefab.visibleButtonControl(true);
	level.f_grpMainMenuPrefab.visibleButtonHome(true);
	level.setPlayMode(PLAYMODE.SINGLE);
	GlobalSetting.preventClickButtonWorldMap = false;
	this.closeDuelMap();
}

mapDuelPrefab.prototype.onEventRefuseFriend = function(){
	//Refuse friend return main menu

	options =  {};
    options.receivers = Photon.LoadBalancing.Constants.ReceiverGroup.Others;
	var playerInfor ={};
	playerInfor.name = facebookStuff.name;
	
	GlobalSetting.photonManager.onRaiseEvent(9,playerInfor,options);
	
	GlobalSetting.photonManager.onRaiseEvent(12,null,options);

	
	GlobalSetting.photonManager.leaveRoom();
	isFriendCall = false;
	GlobalSetting.entryPointData = null;

	GlobalSetting.preventClickButtonWorldMap = false;
	game.state.start("Level");
	
}

//message when friend resfuse challenge
mapDuelPrefab.prototype.showMessageRefuseFriend = function(playerName){
	this.fTxt_infor_wait.text = playerName +level.Language.friendCancelRequest();
}

mapDuelPrefab.prototype.onEventNotEnoughGem = function(){
	if(this.game.device.desktop){
		level.f_grpMainMenuPrefab.onEventPlaySingle();
	}
	else{
		//show Reward Video when in mobile device
		FBshowRewardedVideo();
		
		if(isRewardVideoSuccess){
			 //Update Gems Coin
			 localData.gems += GEM_EARNED_WHEN_WATCH_VIDEOS_ADS;
			  level.f_grpMainMenuPrefab.updateGemCoin(localData.gems,localData.coins);
			//Save Data
			  level.saveData();
		
		}
	}
}

mapDuelPrefab.prototype.onEventCloseEnoughGem = function(){
	this.f_grp_Not_Enough_gems.visible = false;
	this.scroller.start();
	this.isStateEnoughGems = false;
	this.f_grpChooseMap.visible= true;
	level.setPlayMode(PLAYMODE.DUEL);
	this.openDuelMap();
}

mapDuelPrefab.prototype.onEventAcceptFriend = function(){
	// accept friend
	//Join Room and Play
	this.fAvatar_wait.visible = true;
	this.f_grp_accept_challege.visible = false;
	this.f_grp_wait_joinRoom.visible = false;
	this.f_grp_gems_infor.visible = false;
	options =  {};
    options.receivers = Photon.LoadBalancing.Constants.ReceiverGroup.Others;

	GlobalSetting.photonManager.onRaiseEvent(8,null,options);

	 setTimeout(function () {level.onPlayClick();
	   }, 1500);
	 //GlobalSetting.entryPointData = null;
}


mapDuelPrefab.prototype.onEventCancelJoinRoom = function(){
	this.createRoom = false;
	
	if(level.playMode  === PLAYMODE.DUEL){
	this.fAvatar_wait.visible = false;
	this.fSelect_Map.visible = true;
	this.Time.stop();
	this.isStartTime  = false;
	level.f_grpMainMenuPrefab.visible = true;
	this.visibileMenuDuel(true);
	this.openDuelMap();

	}
	else if(level.playMode  === PLAYMODE.WITHFRIEND){

		GlobalSetting.preventClickButtonWorldMap = false;
		options =  {};
        options.receivers = Photon.LoadBalancing.Constants.ReceiverGroup.Others;
    	GlobalSetting.photonManager.onRaiseEvent(12,null,options);
		game.state.start("Level");
		
		
		GlobalSetting.BGM = null;
		this.isCancelJoinRoomWithFriend = true;
		 setTimeout(function () {
		     level.f_grpMapDuel.isCancelJoinRoomWithFriend = false;
			}, 1000);
		
	}
	
	GlobalSetting.photonManager.leaveRoom();
}


mapDuelPrefab.prototype.onEventPlayDuel = function(currentStage){
	if(	this.isStateEnoughGems ) return;
	
	this.currentIndexGems = currentStage;
	
	//Set Gem Infor
	var entryCost = this.entryFeeCost[currentStage];
	var winCost = this.winCost[currentStage];
	this.fTxt_gem_01.text  =(entryCost>1000) ?(entryCost/1000) +"K" :entryCost ;
	this.fTxt_gem_02.text  = (entryCost>1000) ?(entryCost/1000) +"K" :entryCost;
	this.fTxt_gem_total.text = (winCost>1000) ?(winCost/1000) +"K" :winCost; 
	
	
	this.fTxt_other_player_name_wait.text =level.Language.randomPlayer();
	//check enough gems
	if(localData.gems >=this.entryFeeCost[currentStage] ){
		//accept duel
	
		this.isFirstLoad = false;
		this.fAvatar_wait.visible = true;
		this.visibileMenuDuel(false);
		this.fSelect_Map.visible = false;
		level.f_grpMainMenuPrefab.visible = false;
		this.Time.start();
		this.isStartTime = true;
		level.f_grpMap.visible = true;
		level.f_grpMap.showMap(currentStage);

		
		
		
		if(!this.joinRoom(this.nameMaps[currentStage])){
			
			//when join room failed create room and wait
			options =  {};
		    options.maxPlayers = MAX_PLAYER_JOIN_ROOM;
		    var id = FBInstant.player.getID()	 ;
		    console.log("ID " +id);
		    id  =  (id === null) ?  game.rnd.integerInRange(1,99999)  : id; 
		    userType = USERTYPE.MASTER;
		    var nameRoom = id +"_"+ this.nameMaps[currentStage]  ;
			GlobalSetting.photonManager.onEventCreateRoom(nameRoom,options);
			this.isAddRoom  = false;
		}
		else{
			
		}
	}
	else{
		//show UI enough gem
		this.f_grp_Not_Enough_gems.visible = true;
		this.isStateEnoughGems = true;
		this.scroller.stop();
		this.f_grpChooseMap.visible= false;
		level.setPlayMode(PLAYMODE.SINGLE);
	}


	this.closeDuelMap();
	
	
}
mapDuelPrefab.prototype.costGemRoomJoin = function(){
	if(level.playMode === PLAYMODE.WITHFRIEND) {
		//console.log("winGem Friend " +0);
			return 0;
		}
	return this.entryFeeCost[this.currentIndexGems];
	
}
mapDuelPrefab.prototype.winGem = function(){
	if(level.playMode === PLAYMODE.WITHFRIEND) {
	//console.log("winGem Friend " +0);
		return 0;
	}
	//console.log("this.winCost[this.currentIndexGems] " +this.winCost[this.currentIndexGems]);
	return this.winCost[this.currentIndexGems];
	
}


mapDuelPrefab.prototype.joinRoom = function(nameMap){
	
	
	
	//Check List Room and Join room 
	for(var i = 0 ;i<GlobalSetting.photonManager.getListRoom().length ;i++){
		//Check Room if room maxPlayers === 1

		if(GlobalSetting.photonManager.getListRoom()[i].playerCount  === 1){
			//Get InforRoom
			var nameRoom  = GlobalSetting.photonManager.getListRoom()[i].name;
			var res = nameRoom.split("_");
			
			if(res[res.length - 1]  === nameMap){
				//Join Room
				options =  {};
			    options.isVisible = false;
				 if( GlobalSetting.photonManager.joinRoomFollowName(nameRoom,options)){
					 //when join room success
					 userType = USERTYPE.CLIENT;
					 //set visible of room
					 GlobalSetting.photonManager.getListRoom()[i].isVisible = false;
						 var facebookPhoto = facebookStuff.picture;
						 var facebookName = facebookStuff.name;
						 var connect = "true";
						 GlobalSetting.photonManager.getListRoom()[i].isVisible =false;
						 
							
							
							this.sendInfor();
			            	
			            	setTimeout(function () {
			            		level.isPositionGenerated = false;
			                }, 1000);
			            				            	
			            	this.isShowGemUIInfor = true;
				return true;
			}
			
			
			}
		}
	}
	return false;
}


mapDuelPrefab.prototype.createRoomWithFriend = function(friendID){
	
	level.setPlayMode(PLAYMODE.WITHFRIEND);
	level.f_grpMap.visible = true;
	level.f_grpMap.showMap(0);
	level.f_grpMapDuel.visible = true;
	this.createRoom = true;
	this.isFirstLoad = false;
	this.fAvatar_wait.visible = true;
	this.visibileMenuDuel(false);
	this.fSelect_Map.visible = false;

	level.f_grpMainMenuPrefab.visible = false;

	this.Time.start();
	this.isStartTime = true;
	this.fTxt_infor_wait.text ="Searching for the opponent…";
	//when join room failed create room and wait
	options =  {};
    options.maxPlayers = MAX_PLAYER_JOIN_ROOM;
    var id = FBInstant.player.getID() ;
    userType = USERTYPE.MASTER;
    var nameRoom = friendID +"_FRIEND"  ;
    if(friendID === FBInstant.player.getID())
    this.fTxt_other_player_name_wait.text = "Waiting...";
	GlobalSetting.photonManager.onEventCreateRoom(nameRoom,options);
	this.isAddRoom  = false;
	
	level.f_grpWorldMapScene.stopScroll();
	GlobalSetting.preventClickButtonWorldMap = true;
	
}

mapDuelPrefab.prototype.hideUIjoinWF = function(nameRoom){
	
	setTimeout(function () {
       if(!level.f_grpMapDuel.isJoinRoomWithFriendSuccess){
    	   game.state.start("Level");
    	   GlobalSetting.entryPointData = null;
       }
    }, 5000);
	

	level.f_grpMainMenuPrefab.openWorldMap();
	level.setPlayMode(PLAYMODE.WITHFRIEND);
	level.f_grpMap.visible = true;
	level.f_grpMap.showMap(0);
	this.f_grp_wait_joinRoom.visible = false;
	this.isFirstLoad = false;
	this.visibileMenuDuel(false);
	this.fSelect_Map.visible = false;
	level.f_grpMainMenuPrefab.visible = false;
	
	 level.f_grpWorldMapScene.stopScroll();
	 GlobalSetting.preventClickButtonWorldMap = true;

	
	
}
mapDuelPrefab.prototype.joinRoomWithFriend = function(nameRoom){

	options =  {};
    options.isVisible = false;
    userType = USERTYPE.CLIENT;
	GlobalSetting.photonManager.joinRoomFollowName(nameRoom,options);
}

mapDuelPrefab.prototype.loadGame = function(){
	this.level.onPlayClick();
	
}

mapDuelPrefab.prototype.showGemsInfor = function(costGem , totalGem){
	this.f_grp_wait_joinRoom.visible = false;
	this.f_grp_gems_infor.visible  = true;
	
	
}

mapDuelPrefab.prototype.DownloadPhotoComplete = function(){
	if(userType ===  USERTYPE.MASTER){
		otherTexture.loadTexture("pic"  +"MASTER");
		
	}
	else{
		otherTexture.loadTexture("pic"  +"CLIENT");
	

	}
	
	otherTexture.width = 140;
	otherTexture.height = 135;
}
mapDuelPrefab.prototype.sendInfor = function(){
	options =  {};
	options.receivers = Photon.LoadBalancing.Constants.ReceiverGroup.Others;
	var playerInfor ={};
	playerInfor.photo = facebookStuff.picture;
	playerInfor.name = facebookStuff.name;
	playerInfor.id = FBInstant.player.getID();
	playerInfor.skin = localData.currentSkin;
	playerInfor.bow = localData.currentBow;
	
	GlobalSetting.photonManager.onRaiseEvent(7,playerInfor,options);
}

mapDuelPrefab.prototype.loadInforClient = function(photo,name,id,skin,bow){
	this.loader.crossOrigin ="anonymous";
	GlobalSetting.clientPhoto = photo;
	localData.photoOtherPlayer =photo;
	level.saveData();
	if(userType ===  USERTYPE.MASTER){
		this.loader.image("pic" +"MASTER" , photo);
		//load SKin other Character
		console.log("skin "+skin);
		level.f_grp_characterSkin.loadPlayerClient(skin,bow);
		level.f_grp_characterSkin.loadPlayerMaster(localData.currentSkin,localData.currentBow);
	}
	else{
		this.loader.image("pic"+"CLIENT" , photo);
			//load SKin other Character
		level.f_grp_characterSkin.loadPlayerMaster(skin,bow);
		level.f_grp_characterSkin.loadPlayerClient(localData.currentSkin,localData.currentBow);
	}
	this.loader.onLoadComplete.addOnce(this.DownloadPhotoComplete);
	this.loader.start();
	
	//console.log("name " + name);
	this.fTxt_other_player_name_wait.text = name;
	this.friendID = id;
	//console.log("id" +id);
	
	//Save Friend Facebook ID 
	if(level.playMode === PLAYMODE.WITHFRIEND && level.f_grpMainMenuPrefab .isSaveFriendFBId){
		localData.friendIDs.push(id);
		level.f_grpMainMenuPrefab .isSaveFriendFBId  = false;
	}

	

	prevFriendChallengeWithMe.name = name;
	prevFriendChallengeWithMe.id = id;
	prevFriendChallengeWithMe.photo = photo;
	prevFriendChallengeWithMeID = id;
	if(level.playMode === PLAYMODE.DUEL){
	   this.showGemsInfor(0,0);
	 setTimeout(function () {level.onPlayClick();
	   }, 1500);
	}
}

mapDuelPrefab.prototype.createRoomAgain = function(facebookID,option){
	//Leave Room
	GlobalSetting.photonManager.leaveRoom();

	//Create Room Again
	setTimeout(function () {
		level.stringSFX = "Room Again";
       GlobalSetting.photonManager.onEventCreateRoom(facebookID,option);
    }, 1000);
}


mapDuelPrefab.prototype.updateTextAlignCenter = function(){
	this.fTxt_watch_Video.x  = this.fBtn_watchVideo.x +this.fBtn_watchVideo.width/2;
	this.fTxt_playSingle.x  = this.fBtn_playSingle.x +this.fBtn_playSingle.width/2;
	this.fTxt_playSingle.y  = this.fBtn_playSingle.y +this.fBtn_playSingle.height/2 ;
	this.fTxt_watch_Video_nofti.x =this.fBG_not_enough_gems.x +this.fBG_not_enough_gems.width/2;
	this.fTxt_play_single_nofti.x =this.fBG_not_enough_gems.x +this.fBG_not_enough_gems.width/2;
	this.fTxt_low_gems.x =this.fBG_not_enough_gems.x +this.fBG_not_enough_gems.width/2;
	this.fTxt_not_enough_gem.x =this.fBG_not_enough_gems.x +this.fBG_not_enough_gems.width/2;
	this.fTxt_other_player_name_wait.x = this.fAvatar_frame2.x +this.fAvatar_frame2.width/2;
	this.fTxt_other_player_name.x = this.fAvatar_frame1.x +this.fAvatar_frame1.width/2;
	this.fTxt_chooseMap_title.x = this.fChoosemap_bar.x +this.fChoosemap_bar.width/2;
}


mapDuelPrefab.prototype.manualUpdate = function(){
	
	
	
	
	if(GlobalSetting.photonManager === null || GlobalSetting.photonManager === undefined) return;
	if(sceneState === STATES.MAINMENU){
		//console.log(" this.isCancelJoinRoomWithFriend "+this.isCancelJoinRoomWithFriend);
		if(this.isCancelJoinRoomWithFriend ) return;
		//Check room when friend send message in game
			//get List Room
		for(var i = 0 ;i<GlobalSetting.photonManager.getListRoom().length ;i++){
			//when  player in room
			//console.log("GlobalSetting.photonManager.isInLobby()  "+GlobalSetting.photonManager.isInLobby());
			var room  = GlobalSetting.photonManager.getListRoom()[i];
			//console.log("room.name " +room.name);
			if(! GlobalSetting.photonManager.isInLobby()) {
				return;
			}

			
			var roomFriendID = FBInstant.player.getID() +"_FRIEND";
			//console.log(" isFriendCall "+isFriendCall);
			if(roomFriendID === room.name && !isFriendCall){
				//join Room
				
				level.setPlayMode(PLAYMODE.WITHFRIEND);
				options =  {};
				options.isVisible = false;
				userType = USERTYPE.CLIENT;
				GlobalSetting.photonManager.joinRoomFollowName(roomFriendID,options);
				isFriendCall = true;
				this.isJoinRoomWithFriendSuccess =true;
				this.hideUIjoinWF();
			}
			
		}
	
	}
}
	

