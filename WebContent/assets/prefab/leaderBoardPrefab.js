
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.0 (Phaser v2.6.2)


/**
 * leaderBoardPrefab.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.
    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function leaderBoardPrefab(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType) {
	
	Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);
	var __leaderBoard = this.game.add.group(this);
	
	var _menu_BG = this.game.add.sprite(0.0, 0.0, 'menu BG', null, __leaderBoard);
	_menu_BG.scale.setTo(1.0, 1.3);
	
	var __grpuserRankBar = this.game.add.group(__leaderBoard);
	__grpuserRankBar.position.setTo(8.0, -38.0);
	
	this.game.add.sprite(832.0, 214.0, 'HUDAtlas', 'user bar', __grpuserRankBar);
	
	var _btn_global_leaderBoard = this.game.add.button(-1.0, 164.0, 'HUDAtlas', null, this, null, 'button 01 leaderBoard', null, null, __leaderBoard);
	_btn_global_leaderBoard.animations.add('down', ['button 02 leaderBoard'], 60, false);
	_btn_global_leaderBoard.animations.add('up', ['button 01 leaderBoard'], 60, false);
	
	var _btn_friend_leaderBoard = this.game.add.button(359.0, 164.0, 'HUDAtlas', null, this, null, 'button 01 leaderBoard', null, null, __leaderBoard);
	_btn_friend_leaderBoard.animations.add('down', ['button 02 leaderBoard'], 60, false);
	_btn_friend_leaderBoard.animations.add('up', ['button 01 leaderBoard'], 60, false);
	
	this.game.add.sprite(-1.0, 279.0, 'HUDAtlas', 'rank bar', __leaderBoard);
	
	var _txt_global = this.game.add.text(90.0, 194.0, 'GLOBAL', {"font":"bold 40px Arial","fill":"#ffffff"}, __leaderBoard);
	_txt_global.anchor.setTo(0.5, 0.0);
	
	var _txt_friend = this.game.add.text(481.0, 196.0, 'FRIEND', {"font":"bold 40px Arial","fill":"#ffffff"}, __leaderBoard);
	_txt_friend.anchor.setTo(0.5, 0.0);
	
	var _txt_Rank = this.game.add.text(12.0, 288.0, 'RANK', {"font":"bold 25px Arial","fill":"#ffffff","align":"right"}, __leaderBoard);
	
	var _txt_Name = this.game.add.text(235.0, 288.0, 'NAME', {"font":"bold 25px Arial","fill":"#ffffff"}, __leaderBoard);
	
	var _txt_HeadShot = this.game.add.text(444.0, 287.0, 'HEADSHOT', {"font":"bold 25px Arial","fill":"#ffffff"}, __leaderBoard);
	
	var _txt_Score = this.game.add.text(612.0, 288.0, 'SCORE', {"font":"bold 25px Arial","fill":"#ffffff"}, __leaderBoard);
	
	var _txt_leaderBoard_title = this.game.add.text(366.0, 89.0, 'LEADERBOARD', {"font":"bold 40px Arial","fill":"#ffffff"}, __leaderBoard);
	_txt_leaderBoard_title.anchor.setTo(0.5, 0.0);
	
	var _btn_close_leaderBoard = this.game.add.button(633.0, 76.0, 'HUDAtlas', null, this, null, 'close button', null, null, __leaderBoard);
	
	
	
	// public fields
	
	this.fGroup = this;
	this.f_leaderBoard = __leaderBoard;
	this.fMenu_BG = _menu_BG;
	this.f_grpuserRankBar = __grpuserRankBar;
	this.fBtn_global_leaderBoard = _btn_global_leaderBoard;
	this.fBtn_friend_leaderBoard = _btn_friend_leaderBoard;
	this.fTxt_global = _txt_global;
	this.fTxt_friend = _txt_friend;
	this.fTxt_Rank = _txt_Rank;
	this.fTxt_Name = _txt_Name;
	this.fTxt_HeadShot = _txt_HeadShot;
	this.fTxt_Score = _txt_Score;
	this.fTxt_leaderBoard_title = _txt_leaderBoard_title;
	this.fBtn_close_leaderBoard = _btn_close_leaderBoard;
	
	this.Create();
	
}

/** @type Phaser.Group */
var leaderBoardPrefab_proto = Object.create(Phaser.Group.prototype);
leaderBoardPrefab.prototype = leaderBoardPrefab_proto;
leaderBoardPrefab.prototype.constructor = leaderBoardPrefab;

/* --- end generated code --- */
// -- user code here --
leaderBoardPrefab.prototype.Init = function(level){
	this.level = level;
}
leaderBoardPrefab.prototype.Create = function(){
	
	this.currentLeaderBoardButton = 0;
	this.prevLeaderBoardButton = -1;
	
	this.leaderBoardButtons = new Array();
	this.leaderBoardButtons.push(this.fBtn_global_leaderBoard);
	this.leaderBoardButtons.push(this.fBtn_friend_leaderBoard);

	this.activeControlButton(this.currentLeaderBoardButton);
	
	
	this.fBtn_global_leaderBoard.onInputUp.add(this.onEventGlobal,this);
	this.fBtn_friend_leaderBoard.onInputUp.add(this.onEventFriend,this);
	this.fBtn_friend_leaderBoard.onInputOut.add(this.OnEventOutFrame,this);
	this.fBtn_global_leaderBoard.onInputOut.add(this.OnEventOutFrame,this);
	this.fBtn_close_leaderBoard.onInputUp.add(this.OnEventCloseLeaderBoard,this);
	
	//LeaderBoard var
	globalLeaderBoardHeadShot = [];
	globalLeaderBoardScore  = [];
	
	friendLeaderBoardHeadShot = [] ;
	friendLeaderBoardScore = [];
	
	ranks = new Array();
	names = new Array ();
	profilePictureTexture = new Array();
	userRankBar  = new Array();
	scores = new Array();
	headShots = new Array();
	friendInfor = new Array();
	friendRank = new Array();
	this.scroller;
	this.currentPlayerScoreRank; 
	this.currentPlayerHeadShotRank;
	
	this.isCreate = false;
	LEADERBOARDTYPE = {
			NONE :0,
			GLOBAL : 1,
			FRIEND :2,
	}
	leaderBoardType = LEADERBOARDTYPE.GLOBAL;
	prevLeaderBoardType = LEADERBOARDTYPE.NONE;
	
	this.createLeaderBoardUI(false);
	
	
	this.isLoadImage = false;
	
	this.getLeaderBoard();
	
	
	
	
	setTimeout(function () {
      level.f_grpLeaderBoardPrefab.loadLeaderBoard();
	}, 500);
	

	
	this.fTxt_Name.visible = false;
	

	this.updateTextAlignCenter();
	
}

leaderBoardPrefab.prototype.stopScroll = function(){
 
	this.scroller.stop();
}

leaderBoardPrefab.prototype.startScroll = function(){
	 
	this.scroller.start();
}

leaderBoardPrefab.prototype.killScroll = function(){
	 
	this.scroller.kill();
}
leaderBoardPrefab.prototype.loadLeaderBoard = function(){
	this.setLeaderBoardUI(globalLeaderBoardHeadShot);
}

leaderBoardPrefab.prototype.OnEventCloseLeaderBoard = function(){
	level.f_grpLeaderBoardPrefab.visible = false;
	level.f_grpMainMenuPrefab.openWorldMap();
	level.f_grpMainMenuPrefab.isOutClick  =false;
	this.killScroll();
	this.hideLeaderBoardUI();
	level.f_grpWorldMapScene.startScroll();
	GlobalSetting.currentMenuState = MENUSTATE.WORLDMAP;
}


leaderBoardPrefab.prototype.OnEventOutFrame = function(){
	this.hideLeaderBoardButton();
	this.leaderBoardButtons[this.currentLeaderBoardButton].animations.play("down");
}

leaderBoardPrefab.prototype.onEventGlobal = function(){

	
	
	if(!this.activeControlButton(0)) return;
	
	leaderBoardType = LEADERBOARDTYPE.GLOBAL;
	//if(prevLeaderBoardType   === leaderBoardType ) return;
	prevLeaderBoardType =leaderBoardType;
	
	this.hideLeaderBoardUI();
	this.setLeaderBoardUI(globalLeaderBoardHeadShot);
	//console.log("load leaderBoard");
}

leaderBoardPrefab.prototype.onEventFriend = function(){
	
	
	
	
	
	
	
	//console.log("Friend");
	if(!this.activeControlButton(1)) return;
	//for(var i =0;i<friendList.length ;i++)
	//	console.log("Friend List " +friendList[i].getName());
	leaderBoardType = LEADERBOARDTYPE.FRIEND;
	if(prevLeaderBoardType   === leaderBoardType ) return;
	prevLeaderBoardType =leaderBoardType;
	friendLeaderBoardHeadShot = new Array();
	friendLeaderBoardScore = new Array();
	//console.log("Friend CLick " +friendList.length);
	this.hideLeaderBoardUI();
	var isPushCurrentPlayerRank = false;
	
	
			//console.log("currentPlayerScoreRank " + this.currentPlayerScoreRank.getPlayer().getPhoto());
			// console.log("currentPlayerHeadShotRank " + this.currentPlayerHeadShotRank.getPlayer().getPhoto());
		
		
		
		//Check Friend list in leaderBoard
		for(var i = 0 ; i< globalLeaderBoardHeadShot.length; i++){
			for(var j = 0 ; j< friendListID.length; j++){
				var id = friendListID[j];
			//	console.log("id " +id);
				if(globalLeaderBoardHeadShot[i]["Id"] === id ){
					
					
					
					
					
					//push to leaderBoard Friend
					friendLeaderBoardHeadShot.push(globalLeaderBoardHeadShot[i]);
					friendLeaderBoardScore.push(globalLeaderBoardScore[i]);
					
					if(globalLeaderBoardScore[i]["Score"] <=  this.currentPlayerScoreRank.getScore() &&
							!isPushCurrentPlayerRank){
						
						var playerHeadShotInfo = {
								"Id":  this.currentPlayerHeadShotRank.getPlayer().getID(),
								"PlayerName":  this.currentPlayerHeadShotRank.getPlayer().getName(),
								"Score":  this.currentPlayerHeadShotRank.getScore(),
								"Rank": 0,
								"Photo":this.currentPlayerHeadShotRank.getPlayer().getPhoto(),
							};
						friendLeaderBoardHeadShot.push(playerHeadShotInfo);
						
						var playerScoreInfo = {
								"Id":  this.currentPlayerScoreRank.getPlayer().getID(),
								"PlayerName":  this.currentPlayerScoreRank.getPlayer().getName(),
								"Score":  this.currentPlayerScoreRank.getScore(),
								"Rank": 0,
								"Photo":  this.currentPlayerScoreRank.getPlayer().getPhoto(),
							};
						friendLeaderBoardScore.push( playerScoreInfo);
						
						isPushCurrentPlayerRank = true;
						
					}
				}
			}
		}
		
		
		this.setLeaderBoardUI(friendLeaderBoardHeadShot);
}

leaderBoardPrefab.prototype.activeControlButton = function(indexControl){
	
	this.currentLeaderBoardButton = indexControl;
	
	//if(this.currentLeaderBoardButton === this.prevLeaderBoardButton) return false ;
	this.prevLeaderBoardButton = this.currentLeaderBoardButton;
	this.hideLeaderBoardButton();
	this.leaderBoardButtons[indexControl].animations.play("down");
	//this.fLight_of_button.position.setTo(this.leaderBoardButtons[indexControl].x,this.leaderBoardButtons[indexControl].y);
	return true;
}


leaderBoardPrefab.prototype.hideLeaderBoardButton = function(){
	
	for(var i =0 ; i < this.leaderBoardButtons.length ;i++){
		this.leaderBoardButtons[i].animations.play("up");
	}
}

leaderBoardPrefab.prototype.createLeaderBoardUI = function (visible){
	
	
	var startY = 330;
	var y = 60;
	var distance = 85;
	this.scroller= game.add.existing(new ScrollableArea(0, startY, 720, 850, {
		horizontalScroll: false,
		verticalScroll: true,
		timeConstantScroll: 1
	},true,0,0));
	this.scroller.inputEnabled = true;
	

	var y = 60;
	var distance = 85;
	for (var i = 0; i < 100; i++) {
		//
	
		
		var userBar =  game.add.sprite(0.0, y-40 +(i*distance), 'HUDAtlas', 'user bar', this.f_grpuserRankBar);
		userBar.visible = visible;
		userRankBar.push(userBar);
		this.scroller.addChild(userBar);
		
		//Load player Name
		var name =game.add.text(220, y + (distance * i) , 'clone', {"font":"bold 20px Arial","fill":"#ffffff","align":"left"}, this.f_grpuserRankBar);
		name.text ="Hai Dang";
		name.visible = visible;
		names.push(name);
		this.scroller.addChild(name);
		
		//Load Rank
		var rank =game.add.text(20, y + (distance * i), 'clone', {"font":"bold 20px Arial","fill":"#ffffff","align":"left"}, this.f_grpuserRankBar);
		rank.text =  (i+1 <=9) ? "0"+ (i+1) : i+1;
		rank.visible = visible;
		ranks.push(rank);
		this.scroller.addChild(rank);
		
		//Load HeadShot Score
		var headShot =game.add.text(490, y + (distance * i), 'clone', {"font":"bold 20px Arial","fill":"#ffffff","align":"left"}, this.f_grpuserRankBar);
		headShot.text = i+1;
		headShot.visible = visible;
		headShots.push(headShot);
		this.scroller.addChild(headShot);
		
		//Load  Score
		var score =game.add.text(620, y + (distance * i), 'clone', {"font":"bold 20px Arial","fill":"#ffffff","align":"left"}, this.f_grpuserRankBar);
		score.text = i+1;
		score.visible = visible;
		scores.push(score);
		this.scroller.addChild(score);
		
		//Load profile Picture
		var profilePicture =game.add.sprite(102, y+7 + (distance * i) , 'profile_sample',this.f_grpuserRankBar);
		profilePicture.anchor.setTo(0.5, 0.5);
		profilePicture.width =65;
		profilePicture.height =65;
		profilePicture.visible = visible;
		profilePictureTexture.push(profilePicture);
		this.scroller.addChild(profilePicture);
		
		
	}
	
	this.scroller.start();
	//this.scroller.kill();
}


leaderBoardPrefab.prototype.DownloadPhotoComplete = function (){
	console.log("DownloadPhotoComplete");
	var tempLeaderBoardHeadShot;
	var tempLeaderBoardScore;


	

	
	tempLeaderBoardHeadShot = (leaderBoardType === LEADERBOARDTYPE.GLOBAL) ? 	globalLeaderBoardHeadShot : friendLeaderBoardHeadShot;
	tempLeaderBoardScore = (leaderBoardType === LEADERBOARDTYPE.GLOBAL) ? 	globalLeaderBoardScore : friendLeaderBoardScore;
	//console.log("leaderBoardType :" +leaderBoardType);
	console.log("tempLeaderBoardHeadShot :" +tempLeaderBoardHeadShot.length);
	for (var i = 0; i < tempLeaderBoardHeadShot.length; i++) {
		//Load Image
		profilePictureTexture[i].visible = true;
		profilePictureTexture[i].loadTexture("pic"+i+leaderBoardType);
		profilePictureTexture[i].width = 65;
		profilePictureTexture[i].height = 65;
		
		//Load Rank
		ranks[i].visible = true;
		//this.scroller.addChild(ranks[i]);
		//Load Name
		names[i].visible = true;
		names[i].text  = tempLeaderBoardHeadShot[i]["PlayerName"];
		
		//Load Score
		scores[i].visible = true;
		scores[i].text  = tempLeaderBoardScore[i]["Score"];
		scores[i].text =  (	scores[i].text<=9) ? "0"+ scores[i].text :scores[i].text;
	
		//Load HeadShot
		headShots[i].visible = true;
		headShots[i].text  = tempLeaderBoardHeadShot[i]["Score"];
		headShots[i].text =  (	headShots[i].text<=9) ? "0"+ headShots[i].text :headShots[i].text;
		
		
		//Load HeadShot
		userRankBar[i].visible = true;
		
	
	}
	//this.scroller.start();
}


leaderBoardPrefab.prototype.hideLeaderBoardUI = function (){

	for(var i =0; i < profilePictureTexture.length ;i++){
		profilePictureTexture[i].visible = false;
	}
	for(var i=0 ; i < ranks.length ;i++){
		ranks[i].visible = false;
	}
	for(var i=0 ; i < scores.length ;i++){
		scores[i].visible = false;
	}
	for(var i =0; i < headShots.length ;i++){
		headShots[i].visible = false;
	}
	for(var i=0 ; i < names.length ;i++){
		names[i].visible = false;
	}
	
	for(var i=0 ; i < userRankBar.length ;i++){
		userRankBar[i].visible = false;
	}
}
leaderBoardPrefab.prototype.setLeaderBoardUI = function (leaderBoard){
	loader = new Phaser.Loader(game);
	loader.crossOrigin ="anonymous";
	
	for (var i = 0; i < leaderBoard.length; i++) {
		loader.image("pic" + i +leaderBoardType , leaderBoard[i]["Photo"]);
		
	}
	
		loader.onLoadComplete.addOnce(this.DownloadPhotoComplete);
		loader.start();
		

}


leaderBoardPrefab.prototype.updateLeaderBoard = function (nameLeaderBoard,score){
	
	console.log("Update Leader Board");
	  FBInstant.getLeaderboardAsync(nameLeaderBoard).then(leaderboard => {
     // console.log("retrieved leaderboard: " + leaderboard.getName());
      return leaderboard.setScoreAsync(score);
  }).then(() => console.log("Score saved: " )).catch(error => console.error(error));
	
	//console.log("Update Score Success");
	
}
leaderBoardPrefab.prototype.getLeaderBoard = function (){
	console.log("get LeaderBoard");
	globalLeaderBoardScore = new Array();
	globalLeaderBoardHeadShot = new Array();
	
	FBInstant.getLeaderboardAsync(GlobalSetting.leaderBoardScore)
	.then(function (leaderboard) {
		return leaderboard.getPlayerEntryAsync();
	})
	.then(function (entry) {
		FBInstant
			.getLeaderboardAsync(GlobalSetting.leaderBoardScore)
			.then(leaderboard => leaderboard.getEntriesAsync(100, 0))
			.then(entries => {

			
				 
				for (var i = 0; i < entries.length; i++) {
					var playerInfo = {
						"Id": entries[i].getPlayer().getID(),
						"PlayerName": entries[i].getPlayer().getName(),
						"Score": entries[i].getScore(),
						"Rank": entries[i].getRank(),
						"Photo": entries[i].getPlayer().getPhoto(),
					};
				
					 globalLeaderBoardScore.push(playerInfo);
				}
			

			}).catch(error => console.log(error));
	});
	
	
	
	
	
	
	FBInstant.getLeaderboardAsync(GlobalSetting.leaderBoardHeadShot)
	.then(function (leaderboard) {
		return leaderboard.getPlayerEntryAsync();
	})
	.then(function (entry) {
		FBInstant
			.getLeaderboardAsync(GlobalSetting.leaderBoardHeadShot)
			.then(leaderboard => leaderboard.getEntriesAsync(100, 0))
			.then(entries => {

				for (var i = 0; i < entries.length; i++) {
					var playerInfo = {
						"Id": entries[i].getPlayer().getID(),
						"PlayerName": entries[i].getPlayer().getName(),
						"Score": entries[i].getScore(),
						"Rank": entries[i].getRank(),
						"Photo": entries[i].getPlayer().getPhoto(),
					};
				
					globalLeaderBoardHeadShot.push(playerInfo);
				}
			

			}).catch(error => console.log(error));
	});
	
	
	
	//get Current Rank of Player
	FBInstant
	  .getLeaderboardAsync(GlobalSetting.leaderBoardHeadShot)
	  .then(leaderboard => leaderboard.getPlayerEntryAsync())
	  .then(entry => {
		  this.currentPlayerHeadShotRank = entry;
	  
	  }).catch(error => console.error(error));
	
	FBInstant
	  .getLeaderboardAsync(GlobalSetting.leaderBoardScore)
	  .then(leaderboard => leaderboard.getPlayerEntryAsync())
	  .then(entry => {
		  this.currentPlayerScoreRank = entry;
	  }).catch(error => console.error(error));

		

}
leaderBoardPrefab.prototype.updateTextAlignCenter = function (){
	this.fTxt_leaderBoard_title.x = this.fMenu_BG.x +this.fMenu_BG.width/2;
	this.fTxt_global.x = this.fBtn_global_leaderBoard.x +this.fBtn_global_leaderBoard.width/2;
	this.fTxt_friend.x = this.fBtn_friend_leaderBoard.x +this.fBtn_friend_leaderBoard.width/2;
}