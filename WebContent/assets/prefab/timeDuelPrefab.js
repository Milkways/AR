
// -- user code here --

/* --- start generated code --- */

// Generated by  1.5.0 (Phaser v2.6.2)


/**
 * timeDuelPrefab.
 * @param {Phaser.Game} aGame A reference to the currently running game.
 * @param {Phaser.Group} aParent The parent Group (or other {@link DisplayObject}) that this group will be added to.
    If undefined/unspecified the Group will be added to the {@link Phaser.Game#world Game World}; if null the Group will not be added to any parent.
 * @param {string} aName A name for this group. Not used internally but useful for debugging.
 * @param {boolean} aAddToStage If true this group will be added directly to the Game.Stage instead of Game.World.
 * @param {boolean} aEnableBody If true all Sprites created with {@link #create} or {@link #createMulitple} will have a physics body created on them. Change the body type with {@link #physicsBodyType}.
 * @param {number} aPhysicsBodyType The physics body type to use when physics bodies are automatically added. See {@link #physicsBodyType} for values.
 */
function timeDuelPrefab(aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType) {
	
	Phaser.Group.call(this, aGame, aParent, aName, aAddToStage, aEnableBody, aPhysicsBodyType);
	var _time = this.game.add.group(this);
	_time.position.setTo(0.0, -146.0);
	
	var __grp_time_duel = this.game.add.group(_time);
	
	var _avatar = this.game.add.sprite(2.0, 144.0, 'HUD2Atlas', 'avatar01', __grp_time_duel);
	
	var _avatar1 = this.game.add.sprite(566.0, 144.0, 'HUD2Atlas', 'avatar02', __grp_time_duel);
	
	this.game.add.sprite(2.0, 146.0, 'HUD2Atlas', 'clock barl', __grp_time_duel);
	
	var _txt_time = this.game.add.text(332.0, 194.0, '60', {"font":"bold 50px Arial","fill":"#ffffff"}, __grp_time_duel);
	
	var _txt_score_client = this.game.add.text(511.0, 198.0, '00', {"font":"bold 40px Arial","fill":"#ff2403"}, __grp_time_duel);
	
	var _grp_Gem_reward = this.game.add.group(__grp_time_duel);
	
	var _diamond = this.game.add.sprite(367.0, 190.0, 'HUDAtlas', 'diamond', _grp_Gem_reward);
	_diamond.scale.setTo(0.3, 0.3);
	
	var _txt_total_gems = this.game.add.text(335.0, 189.0, '140', {"font":"bold 20px Arial","fill":"#ffffff"}, _grp_Gem_reward);
	
	var _other_player_picture = this.game.add.sprite(638.0, 221.0, 'profile_sample', null, __grp_time_duel);
	_other_player_picture.anchor.setTo(0.5, 0.5);
	
	var __grp_time_single = this.game.add.group(_time);
	
	this.game.add.sprite(14.0, 158.0, 'time_single', null, __grp_time_single);
	
	var _txt_score_master = this.game.add.text(163.0, 198.0, '00', {"font":"bold 40px Arial","fill":"#3683ff"}, _time);
	
	var _player_picture = this.game.add.sprite(78.0, 221.0, 'profile_sample', null, _time);
	_player_picture.anchor.setTo(0.5, 0.5);
	
	
	
	// public fields
	
	this.f_grp_time_duel = __grp_time_duel;
	this.fAvatar = _avatar;
	this.fAvatar1 = _avatar1;
	this.fTxt_time = _txt_time;
	this.fTxt_score_client = _txt_score_client;
	this.fGrp_Gem_reward = _grp_Gem_reward;
	this.fTxt_total_gems = _txt_total_gems;
	this.fOther_player_picture = _other_player_picture;
	this.f_grp_time_single = __grp_time_single;
	this.fTxt_score_master = _txt_score_master;
	this.fPlayer_picture = _player_picture;
	
	this.Create();
	
}

/** @type Phaser.Group */
var timeDuelPrefab_proto = Object.create(Phaser.Group.prototype);
timeDuelPrefab.prototype = timeDuelPrefab_proto;
timeDuelPrefab.prototype.constructor = timeDuelPrefab;

/* --- end generated code --- */
// -- user code here --
timeDuelPrefab.prototype.Create = function(){
	this.TIME_LIMIT = 60;
	this.tempTimeLimit = this.TIME_LIMIT;
	this.elapsedTime = 0;
	this.Time = game.time.create();
	this.duration = 0;
	this.seconds = 0;
	this.IsStartTime = false;
	this.isEndTime = false;
	this.fTxt_score_client.text = "00";
	this.fTxt_score_master.text = "00";
	
	this.fGrp_Gem_reward.visible = false;
	//this.fTxt_time.y = 200;
	
}

timeDuelPrefab.prototype.startTime = function(){
	this.Time.start();
	this.duration = 0;
	this.tempTimeLimit = this.TIME_LIMIT;
	this.isEndTime = false;
	
	//load texture
	if(userType === USERTYPE.CLIENT){
		this.fOther_player_picture.loadTexture("profilePicture");
		this.fPlayer_picture.loadTexture("pic"+"CLIENT");	
	}
	else{
		this.fPlayer_picture.loadTexture("profilePicture");
		this.fOther_player_picture.loadTexture("pic"+"MASTER");
		
	}
	
	this.fOther_player_picture.width  = 97;
	this.fOther_player_picture.height  = 90;
	
	
	this.fPlayer_picture.width  = 97;
	this.fPlayer_picture.height  = 90;

 	
	
	this.updatePictureCenter();
}

timeDuelPrefab.prototype.updateTime = function(){
	this.duration =this.tempTimeLimit - this.seconds;
	if(this.duration<=0) this.duration = 0;
	var strTime = (Math.round( this.duration ) < 10 ) ? "0"+Math.round( this.duration ):Math.round( this.duration );
	this.fTxt_time.text = strTime;

	//Send Message to Other Player
	options =  {};
    options.receivers = Photon.LoadBalancing.Constants.ReceiverGroup.Others;
	var time ={};
	time.seconds = this.seconds;
	
	GlobalSetting.photonManager.onRaiseEvent(15,time,options);

	if(this.duration <=0 ) {
		this.tempTimeLimit =0;
		return true;
	}
	
	return false;
}

timeDuelPrefab.prototype.updateTimeSeconds = function(seconds){
	if(seconds>=this.Time.seconds){
		this.Time.seconds =seconds;
		this.seconds = seconds;
	}
	else{
		this.seconds = this.Time.seconds;
	}
	
}

timeDuelPrefab.prototype.updateTextTime = function(time){

	this.fTxt_time.text = (Math.round( time ) < 10 ) ? "0"+Math.round( time ):Math.round( time );
}

timeDuelPrefab.prototype.endTime = function(){
	this.Time.stop();
	this.isEndTime = true;
}


timeDuelPrefab.prototype.updateScoreSingleMode = function(score){
	var strScore = (score <= 9) ? "0"+score :score;
	this.fTxt_score_master.text = strScore;
}

timeDuelPrefab.prototype.loadAvatarSingleMode = function(){
	this.fPlayer_picture.loadTexture("profilePicture");
}


timeDuelPrefab.prototype.visibletimeUIDuelMode = function(visible){
	this.f_grp_time_single.visible = !visible;
	this.f_grp_time_duel.visible = visible;
}

timeDuelPrefab.prototype.updateScore = function(score){
	var strScore = (score <= 9) ? "0"+score :score;
	//console.log("score " + score);
	console.log("strScore " +strScore);
	
	if(userType === USERTYPE.MASTER){
		this.fTxt_score_client.text = strScore;
	}
	else{
		this.fTxt_score_master.text = strScore;
	}
}


timeDuelPrefab.prototype.updateLocalScore = function(score){
	var strScore = (score <= 9) ? "0"+score :score;
	//console.log("score " + score);
	console.log("strScore " +strScore);
	
	if(userType === USERTYPE.MASTER){
		this.fTxt_score_master.text = strScore;
	}
	else{
		this.fTxt_score_client.text = strScore;
	}
}


timeDuelPrefab.prototype.updatePictureCenter = function(){
	this.fPlayer_picture.x  = this.fAvatar.x +this.fAvatar.width/2 +3;
	this.fPlayer_picture.y  = this.fAvatar.y +this.fAvatar.height/2 +3;
	
	this.fOther_player_picture.x  = this.fAvatar1.x +this.fAvatar1.width/2 -3;
	this.fOther_player_picture.y  = this.fAvatar1.y +this.fAvatar1.height/2 +3;
}

